package cc.yuan.leopardkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import cc.yuan.leopardkit.db.FileModel;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "httpFile".
 */
public class FileModelDao extends AbstractDao<FileModel, Long> {

    public static final String TABLENAME = "httpFile";

    /**
     * Properties of entity FileModel
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, Long.class, "key", true, "KEY");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property State = new Property(2, Integer.class, "state", false, "STATE");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSavePath = new Property(5, String.class, "fileSavePath", false, "FILE_SAVE_PATH");
        public final static Property Progress = new Property(6, Long.class, "progress", false, "PROGRESS");
        public final static Property FileLength = new Property(7, Long.class, "fileLength", false, "FILE_LENGTH");
    };

    private DaoSession daoSession;


    public FileModelDao(DaoConfig config) {
        super(config);
    }

    public FileModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"httpFile\" (" + //
                "\"KEY\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: key
                "\"TYPE\" INTEGER," + // 1: type
                "\"STATE\" INTEGER," + // 2: state
                "\"URL\" TEXT," + // 3: url
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"FILE_SAVE_PATH\" TEXT," + // 5: fileSavePath
                "\"PROGRESS\" INTEGER," + // 6: progress
                "\"FILE_LENGTH\" INTEGER);"); // 7: fileLength
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_httpFile_KEY ON httpFile" +
                " (\"KEY\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"httpFile\"";
        db.execSQL(sql);
    }

    @Override
    protected void bindValues(SQLiteStatement stmt, FileModel entity) {
        stmt.clearBindings();

        Long key = entity.getKey();
        if (key != null) {
            stmt.bindLong(1, key);
        }

        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }

        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(3, state);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }

        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }

        String fileSavePath = entity.getFileSavePath();
        if (fileSavePath != null) {
            stmt.bindString(6, fileSavePath);
        }

        Long progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(7, progress);
        }

        Long fileLength = entity.getFileLength();
        if (fileLength != null) {
            stmt.bindLong(8, fileLength);
        }
    }

    @Override
    protected void attachEntity(FileModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public FileModel readEntity(Cursor cursor, int offset) {
        FileModel entity = new FileModel( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // key
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // state
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fileSavePath
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // progress
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // fileLength
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, FileModel entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setState(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileSavePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProgress(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setFileLength(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
    }

    @Override
    protected Long updateKeyAfterInsert(FileModel entity, long rowId) {
        entity.setKey(rowId);
        return rowId;
    }

    @Override
    public Long getKey(FileModel entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
